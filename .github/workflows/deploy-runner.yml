name: Deploy Runner
run-name: Deploying ${{ github.event.client_payload.repository }} to ${{ github.event.client_payload.environment }}

on:
  repository_dispatch:
    types: [deploy]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the private repository.
      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.repository }}
          ref: ${{ github.event.client_payload.branch }}
          token: ${{ github.event.client_payload.repo_token }}
          path: my-private-app-code

#       Step 2: Log Dispatch Details
      - name: Log Dispatch Details
        run: |
          echo "Received dispatch event with payload:"
          echo "  Commit SHA: ${{ github.sha }}"
          echo "  Source Repo: ${{ github.event.client_payload.repository }}"
          echo "  Environment: ${{ github.event.client_payload.environment }}"
          echo "  Branch: ${{ github.ref_name }}"
          echo "  Triggered by: ${{ github.event.client_payload.pipeline_number }}"
          echo "  Application Type: ${{ github.event.client_payload.app_type }}"

#       Step 3: Cache Dependencies (AFTER checkout)
#       ✅ Java uses built-in Maven cache from setup-java@v4

      - name: Cache Node.js dependencies
        if: github.event.client_payload.app_type == 'angular'
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            my-private-app-code/node_modules
          key: node-${{ runner.os }}-${{ hashFiles('my-private-app-code/package-lock.json') }}
          restore-keys: |
            node-${{ runner.os }}-
            node-

      - name: Cache Flutter dependencies
        if: github.event.client_payload.app_type == 'flutter'
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: flutter-${{ runner.os }}-${{ hashFiles('my-private-app-code/pubspec.lock') }}
          restore-keys: |
            flutter-${{ runner.os }}-
            flutter-

      # Step 4: Set up the correct runtime environment based on app type.
      - name: Set up Java 21
        if: github.event.client_payload.app_type == 'java'
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven  # ✅ Automatic Maven dependency caching

      - name: Cache Maven dependencies
        if: github.event.client_payload.app_type == 'java'
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            my-private-app-code/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('my-private-app-code/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Set up Node.js 22
        if: github.event.client_payload.app_type == 'angular'
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Step 4.5: Install dependencies and build Angular project
      - name: Install Angular dependencies
        if: github.event.client_payload.app_type == 'angular'
        run: |
          cd my-private-app-code
          npm ci

      - name: Build Angular project
        if: github.event.client_payload.app_type == 'angular'
        run: |
          cd my-private-app-code
          npm run build -- --configuration=production

      - name: Set up Flutter
        if: github.event.client_payload.app_type == 'flutter'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.2'
          channel: 'stable'
          cache: true  # ✅ Built-in Flutter cache

      # Step 5: Setup SSH for deployment
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ github.event.client_payload.ssh_private_key }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts

      # Step 6: Make deployment script executable
      - name: Make Deploy Script Executable
        run: |
          chmod +x my-private-app-code/deploy.sh

      # Step 7: Verify script permissions
      - name: Verify Script Permissions
        run: |
          ls -la my-private-app-code/deploy.sh

      # Step 8: Run the dynamic deployment script
      - name: Run Dynamic Deployment Script
        run: |
          echo "Starting deployment for ${{ github.event.client_payload.app_type }} application to ${{ github.event.client_payload.environment }}..."
          cd my-private-app-code
          ./deploy.sh --payload '${{ toJson(github.event.client_payload) }}'
